{"ast":null,"code":"!function (globals) {\n  'use strict';\n\n  //*** UMD BEGIN\n  if (typeof define !== 'undefined' && define.amd) {\n    //require.js / AMD\n    define([], function () {\n      return secureRandom;\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    //CommonJS\n    module.exports = secureRandom;\n  } else {\n    //script / browser\n    globals.secureRandom = secureRandom;\n  }\n  //*** UMD END\n\n  //options.type is the only valid option\n  function secureRandom(count, options) {\n    options = options || {\n      type: 'Array'\n    };\n    //we check for process.pid to prevent browserify from tricking us\n    if (typeof process != 'undefined' && typeof process.pid == 'number' && process.versions && process.versions.node) {\n      return nodeRandom(count, options);\n    } else {\n      var crypto = window.crypto || window.msCrypto;\n      if (!crypto) throw new Error(\"Your browser does not support window.crypto.\");\n      return browserRandom(count, options);\n    }\n  }\n  function nodeRandom(count, options) {\n    var crypto = require('crypto');\n    var buf = crypto.randomBytes(count);\n    switch (options.type) {\n      case 'Array':\n        return [].slice.call(buf);\n      case 'Buffer':\n        return buf;\n      case 'Uint8Array':\n        var arr = new Uint8Array(count);\n        for (var i = 0; i < count; ++i) {\n          arr[i] = buf.readUInt8(i);\n        }\n        return arr;\n      default:\n        throw new Error(options.type + \" is unsupported.\");\n    }\n  }\n  function browserRandom(count, options) {\n    var nativeArr = new Uint8Array(count);\n    var crypto = window.crypto || window.msCrypto;\n    crypto.getRandomValues(nativeArr);\n    switch (options.type) {\n      case 'Array':\n        return [].slice.call(nativeArr);\n      case 'Buffer':\n        try {\n          var b = new Buffer(1);\n        } catch (e) {\n          throw new Error('Buffer not supported in this environment. Use Node.js or Browserify for browser support.');\n        }\n        return new Buffer(nativeArr);\n      case 'Uint8Array':\n        return nativeArr;\n      default:\n        throw new Error(options.type + \" is unsupported.\");\n    }\n  }\n  secureRandom.randomArray = function (byteCount) {\n    return secureRandom(byteCount, {\n      type: 'Array'\n    });\n  };\n  secureRandom.randomUint8Array = function (byteCount) {\n    return secureRandom(byteCount, {\n      type: 'Uint8Array'\n    });\n  };\n  secureRandom.randomBuffer = function (byteCount) {\n    return secureRandom(byteCount, {\n      type: 'Buffer'\n    });\n  };\n}(this);","map":{"version":3,"names":["globals","define","amd","secureRandom","module","exports","count","options","type","process","pid","versions","node","nodeRandom","crypto","window","msCrypto","Error","browserRandom","require","buf","randomBytes","slice","call","arr","Uint8Array","i","readUInt8","nativeArr","getRandomValues","b","Buffer","e","randomArray","byteCount","randomUint8Array","randomBuffer"],"sources":["/Users/sada/Documents/Kuliah/Semester 6/Periode 2/Ujian/login-app/node_modules/secure-random/lib/secure-random.js"],"sourcesContent":["!function(globals){\n'use strict'\n\n//*** UMD BEGIN\nif (typeof define !== 'undefined' && define.amd) { //require.js / AMD\n  define([], function() {\n    return secureRandom\n  })\n} else if (typeof module !== 'undefined' && module.exports) { //CommonJS\n  module.exports = secureRandom\n} else { //script / browser\n  globals.secureRandom = secureRandom\n}\n//*** UMD END\n\n//options.type is the only valid option\nfunction secureRandom(count, options) {\n  options = options || {type: 'Array'}\n  //we check for process.pid to prevent browserify from tricking us\n  if (\n    typeof process != 'undefined'\n    && typeof process.pid == 'number'\n    && process.versions\n    && process.versions.node\n  ) {\n    return nodeRandom(count, options)\n  } else {\n    var crypto = window.crypto || window.msCrypto\n    if (!crypto) throw new Error(\"Your browser does not support window.crypto.\")\n    return browserRandom(count, options)\n  }\n}\n\nfunction nodeRandom(count, options) {\n  var crypto = require('crypto')\n  var buf = crypto.randomBytes(count)\n\n  switch (options.type) {\n    case 'Array':\n      return [].slice.call(buf)\n    case 'Buffer':\n      return buf\n    case 'Uint8Array':\n      var arr = new Uint8Array(count)\n      for (var i = 0; i < count; ++i) { arr[i] = buf.readUInt8(i) }\n      return arr\n    default:\n      throw new Error(options.type + \" is unsupported.\")\n  }\n}\n\nfunction browserRandom(count, options) {\n  var nativeArr = new Uint8Array(count)\n  var crypto = window.crypto || window.msCrypto\n  crypto.getRandomValues(nativeArr)\n\n  switch (options.type) {\n    case 'Array':\n      return [].slice.call(nativeArr)\n    case 'Buffer':\n      try { var b = new Buffer(1) } catch(e) { throw new Error('Buffer not supported in this environment. Use Node.js or Browserify for browser support.')}\n      return new Buffer(nativeArr)\n    case 'Uint8Array':\n      return nativeArr\n    default:\n      throw new Error(options.type + \" is unsupported.\")\n  }\n}\n\nsecureRandom.randomArray = function(byteCount) {\n  return secureRandom(byteCount, {type: 'Array'})\n}\n\nsecureRandom.randomUint8Array = function(byteCount) {\n  return secureRandom(byteCount, {type: 'Uint8Array'})\n}\n\nsecureRandom.randomBuffer = function(byteCount) {\n  return secureRandom(byteCount, {type: 'Buffer'})\n}\n\n\n}(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}